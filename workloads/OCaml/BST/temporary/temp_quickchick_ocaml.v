(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

(** Init function; without side-effects in Coq *)
Definition init_module : unit :=
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__.

(** Init function; without side-effects in Coq *)
Definition init_module : unit :=
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "BST".

(** Init function; without side-effects in Coq *)
Definition init_module : unit :=
  Expect_test_collector.Current_file.set "impl.ml".

(** Init function; without side-effects in Coq *)
Definition init_module : unit :=
  Ppx_inline_test_lib.Runtime.set_lib_and_partition "BST" "".

Inductive tree : Set :=
| E : tree
| T : tree -> nat -> nat -> tree -> tree.

Module nameless_include.
  
  
  Fixpoint tree_of_sexp : Sexplib0.Sexp.t -> tree :=
    let error_source__003_ := "impl.ml.tree" in
    fun (function_parameter : Sexplib0.Sexp.t) =>
      match function_parameter with
      | Sexplib0.Sexp.Atom ("e" | "E") => E
      |
        (Sexplib0.Sexp.List
          (cons (Sexplib0.Sexp.Atom (("t" | "T") as _tag__006_)) sexp_args__007_))
          as _sexp__005_ =>
        match sexp_args.007_ with
        |
          cons arg0__008_
            (cons arg1__009_ (cons arg2__010_ (cons arg3__011_ []))) =>
          let res0__012_ : tree :=
            tree_of_sexp arg0.008_
          in let res1__013_ : Core.Import.int :=
            Core.int_of_sexp arg1.009_
          in let res2__014_ : Core.Import.int :=
            Core.int_of_sexp arg2.010_
          in let res3__015_ : tree :=
            tree_of_sexp arg3.011_ in
          T res0.012_ res1.013_ res2.014_ res3.015_
        | _ =>
          Sexplib0.Sexp_conv_error.stag_incorrect_n_args error_source.003_
            _tag.006_ _sexp.005_
        end
      |
        (Sexplib0.Sexp.List (cons (Sexplib0.Sexp.Atom ("e" | "E")) _)) as
          sexp__004_ =>
        Sexplib0.Sexp_conv_error.stag_no_args error_source.003_ sexp.004_
      | (Sexplib0.Sexp.Atom ("t" | "T")) as sexp__004_ =>
        Sexplib0.Sexp_conv_error.stag_takes_args error_source.003_ sexp.004_
      | (Sexplib0.Sexp.List (cons (Sexplib0.Sexp.List _) _)) as sexp__002_ =>
        Sexplib0.Sexp_conv_error.nested_list_invalid_sum error_source.003_
          sexp.002_
      | (Sexplib0.Sexp.List []) as sexp__002_ =>
        Sexplib0.Sexp_conv_error.empty_list_invalid_sum error_source.003_
          sexp.002_
      | sexp__002_ =>
        Sexplib0.Sexp_conv_error.unexpected_stag error_source.003_ sexp.002_
      end.
  
  
  
  Fixpoint sexp_of_tree (function_parameter : tree) : Sexplib0.Sexp.t :=
    match function_parameter with
    | E => Sexplib0.Sexp.Atom "E"
    | T arg0__016_ arg1__017_ arg2__018_ arg3__019_ =>
      let res0__020_ : Sexplib0.Sexp.t :=
        sexp_of_tree arg0.016_
      in let res1__021_ : Sexplib0.Sexp.t :=
        Core.sexp_of_int arg1.017_
      in let res2__022_ : Sexplib0.Sexp.t :=
        Core.sexp_of_int arg2.018_
      in let res3__023_ : Sexplib0.Sexp.t :=
        sexp_of_tree arg3.019_ in
      Sexplib0.Sexp.List
        [ Sexplib0.Sexp.Atom "T"; res0.020_; res1.021_; res2.022_; res3.023_ ]
    end.
  
  
  
  Definition quickcheck_generator_tree
    : Ppx_quickcheck_runtime.Base_quickcheck.Generator.t tree :=
    let quickcheck_generator_tree :=
      (* ❌ Lazy expressions are not handled *)
      lazy
        (let quickcheck_generator_tree :=
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
            quickcheck_generator_tree in
        let '_ := Core.ignore quickcheck_generator_tree in
        let _pair__038_
          : float * Ppx_quickcheck_runtime.Base_quickcheck.Generator.t tree :=
          ((* ❌ Float constant 1. is approximated by the integer 1 *)
          1,
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
              (fun (_size__042_ : Base.int) =>
                fun (_random__043_ : Splittable_random.State.t) => E)))
        in let _pair__039_
          : float * Ppx_quickcheck_runtime.Base_quickcheck.Generator.t tree :=
          ((* ❌ Float constant 1. is approximated by the integer 1 *)
          1,
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
              (fun (_size__035_ : Base.int) =>
                Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                    (fun (_size__040_ : Base.int) =>
                      fun (_random__041_ : Splittable_random.State.t) =>
                        T
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            quickcheck_generator_tree _size.040_ _random.041_)
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            Core.quickcheck_generator_int _size.040_
                            _random.041_)
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            Core.quickcheck_generator_int _size.040_
                            _random.041_)
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            quickcheck_generator_tree _size.040_ _random.041_)))
                  (Ppx_quickcheck_runtime.Base.Int.pred _size.035_)))) in
        let _gen__036_
          : Ppx_quickcheck_runtime.Base_quickcheck.Generator.t tree :=
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [ _pair.038_ ]
        in let _gen__037_
          : Ppx_quickcheck_runtime.Base_quickcheck.Generator.t tree :=
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [ _pair.038_; _pair.039_ ] in
        Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
          (fun (function_parameter : Base.int) =>
            match function_parameter with
            | 0 => _gen.036_
            | _ => _gen.037_
            end)) in
    Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
      quickcheck_generator_tree.
  
  
  
  Definition quickcheck_observer_tree
    : Ppx_quickcheck_runtime.Base_quickcheck.Observer.t tree :=
    let quickcheck_observer_tree :=
      (* ❌ Lazy expressions are not handled *)
      lazy
        (let quickcheck_observer_tree :=
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
            quickcheck_observer_tree in
        let '_ := Core.ignore quickcheck_observer_tree in
        Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
          (fun (_x__028_ : tree) =>
            fun (_size__029_ : Base.int) =>
              fun (_hash__030_ : Base.Hash.state) =>
                match _x.028_ with
                | E =>
                  let _hash__030_ :=
                    Ppx_quickcheck_runtime.Base.hash_fold_int _hash.030_ 0 in
                  _hash.030_
                | T _x__031_ _x__032_ _x__033_ _x__034_ =>
                  let _hash__030_ :=
                    Ppx_quickcheck_runtime.Base.hash_fold_int _hash.030_ 1 in
                  let _hash__030_ :=
                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                      quickcheck_observer_tree _x.031_ _size.029_ _hash.030_ in
                  let _hash__030_ :=
                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                      Core.quickcheck_observer_int _x.032_ _size.029_ _hash.030_
                    in
                  let _hash__030_ :=
                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                      Core.quickcheck_observer_int _x.033_ _size.029_ _hash.030_
                    in
                  let _hash__030_ :=
                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                      quickcheck_observer_tree _x.034_ _size.029_ _hash.030_ in
                  _hash.030_
                end)) in
    Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
      quickcheck_observer_tree.
  
  
  
  Definition quickcheck_shrinker_tree
    : Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t tree :=
    let quickcheck_shrinker_tree :=
      (* ❌ Lazy expressions are not handled *)
      lazy
        (let quickcheck_shrinker_tree :=
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
            quickcheck_shrinker_tree in
        let '_ := Core.ignore quickcheck_shrinker_tree in
        Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
          (fun (function_parameter : tree) =>
            match function_parameter with
            | E => Ppx_quickcheck_runtime.Base.Sequence.round_robin nil
            | T _x__024_ _x__025_ _x__026_ _x__027_ =>
              Ppx_quickcheck_runtime.Base.Sequence.round_robin
                [
                  Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      quickcheck_shrinker_tree
                      _x.024_)
                    (fun (_x__024_ : tree) =>
                      T _x.024_ _x.025_ _x.026_
                        _x.027_);
                  Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      Core.quickcheck_shrinker_int
                      _x.025_)
                    (fun (_x__025_ : Base.int) =>
                      T _x.024_ _x.025_ _x.026_
                        _x.027_);
                  Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      Core.quickcheck_shrinker_int
                      _x.026_)
                    (fun (_x__026_ : Base.int) =>
                      T _x.024_ _x.025_ _x.026_
                        _x.027_);
                  Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      quickcheck_shrinker_tree
                      _x.027_)
                    (fun (_x__027_ : tree) =>
                      T _x.024_ _x.025_ _x.026_
                        _x.027_)
                ]
            end)) in
    Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
      quickcheck_shrinker_tree.
  

End nameless_include.

Include nameless_include.

Definition fuel : nat := 10000.

Fixpoint insert (k_value : int) (v_value : int) (t_value : tree) : tree :=
  match t_value with
  | E => T E k_value v_value E
  | T l_value k' v' r_value =>
    let '_ := Core.ignore (l_value, k', v', r_value, insert) in
    T E k_value v_value E
  end.

Fixpoint join (l_value : tree) (r_value : tree) : tree :=
  match (l_value, r_value) with
  | (E, _) => r_value
  | (_, E) => l_value
  | (T l_value k_value v_value r_value, T l' k' v' r') =>
    T l_value k_value v_value (T (join r_value l') k' v' r')
  end.

Fixpoint delete (k_value : int) (t_value : tree) : tree :=
  match t_value with
  | E => E
  | T l_value k' v' r_value =>
    if Core.Poly.op_lt k_value k' then
      T (delete k_value l_value) k' v' r_value
    else
      if Core.Poly.op_lt k' k_value then
        T l_value k' v' (delete k_value r_value)
      else
        join l_value r_value
  end.

Fixpoint below (k_value : int) (t_value : tree) : tree :=
  match (k_value, t_value) with
  | (_, E) => E
  | (k_value, T l_value k' v_value r_value) =>
    if Core.Poly.op_lteq k_value k' then
      below k_value l_value
    else
      T l_value k' v_value (below k_value r_value)
  end.

Fixpoint above (k_value : int) (t_value : tree) : tree :=
  match (k_value, t_value) with
  | (_, E) => E
  | (k_value, T l_value k' v_value r_value) =>
    if Core.Poly.op_lteq k' k_value then
      above k_value r_value
    else
      T (above k_value l_value) k' v_value r_value
  end.

Fixpoint union_ (l_value : tree) (r_value : tree) (f_value : int) : tree :=
  match f_value with
  | 0 => E
  | _ =>
    let f' := BST.Nat.Nat.op_minus f_value 1 in
    match (l_value, r_value) with
    | (E, _) => r_value
    | (_, E) => l_value
    | (T l_value k_value v_value r_value, t_value) =>
      T (union_ l_value (below k_value t_value) f') k_value v_value
        (union_ r_value (above k_value t_value) f')
    end
  end.

Definition union (l_value : tree) (r_value : tree) : tree :=
  union_ l_value r_value fuel.

Fixpoint find (k_value : int) (t_value : tree) : option nat :=
  match (k_value, t_value) with
  | (_, E) => None
  | (k_value, T l_value k' v' r_value) =>
    if Core.Poly.op_lt k_value k' then
      find k_value l_value
    else
      if Core.Poly.op_lt k' k_value then
        find k_value r_value
      else
        Some v'
  end.

Fixpoint size (t_value : tree) : nat :=
  match t_value with
  | E => 0
  | T l_value _ _ r_value =>
    BST.Nat.Nat.op_plus (BST.Nat.Nat.op_plus 1 (size l_value)) (size r_value)
  end.

Definition prop_InsertPost2 : tree -> nat -> nat -> nat -> bool :=
  let fix keys (t_value : tree) : Base.List.t nat :=
    match t_value with
    | E => nil
    | T l_value k_value _v r_value =>
      let lk := keys l_value in
      let rk := keys r_value in
      Core.op_at [ k_value ] (Core.op_at lk rk)
    end in
  let fix all (f_value : nat -> bool) (l_value : list int) : bool :=
    match l_value with
    | [] => true
    | cons x_value xs => Core.op_andand (f_value x_value) (all f_value xs)
    end in
  let fix isBST (t_value : tree) : bool :=
    match t_value with
    | E => true
    | T l_value k_value _ r_value =>
      Core.op_andand (isBST l_value)
        (Core.op_andand (isBST r_value)
          (Core.op_andand
            (all (fun (k' : int) => Core.Poly.op_lt k' k_value) (keys l_value))
            (all (fun (k' : int) => Core.Poly.op_gt k' k_value) (keys r_value))))
    end in
  fun (t_value : tree) =>
    fun (k_value : int) =>
      fun (k' : int) =>
        fun (v_value : int) =>
          Core.op_pipepipe (Core.not (isBST t_value))
            (Core.Poly.op_eq (find k' (insert k_value v_value t_value))
              (if Core.Poly.op_eq k_value k' then
                Some v_value
              else
                find k' t_value)).

(** Init function; without side-effects in Coq *)
Definition init_module : unit := Ppx_inline_test_lib.Runtime.unset_lib "BST".

(** Init function; without side-effects in Coq *)
Definition init_module : unit := Expect_test_collector.Current_file.unset tt.

(** Init function; without side-effects in Coq *)
Definition init_module : unit :=
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset tt.

(** Init function; without side-effects in Coq *)
Definition init_module : unit :=
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__.
